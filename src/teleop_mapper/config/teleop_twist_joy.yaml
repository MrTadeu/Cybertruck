#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Joy
from std_msgs.msg import Float64MultiArray

class JoystickMapper(Node):
    def __init__(self):
        super().__init__('joystick_mapper')
        self.velocity_publisher = self.create_publisher(Float64MultiArray, '/forward_velocity_controller/commands', 10)
        self.steering_publisher = self.create_publisher(Float64MultiArray, '/forward_position_controller/commands', 10)
        self.subscription = self.create_subscription(Joy, '/joy', self.joy_callback, 10)

        # Scaling factors
        self.scale_linear_forward = 1.0  # Initial scale for forward throttle
        self.scale_linear_backward = 1.0  # Initial scale for reverse throttle
        self.scale_angular = 2.0  # Initial scale for steering
        self.scale_step = 0.2  # Increment or decrement step for scaling

    def joy_callback(self, msg: Joy):
        # Handle speed adjustment with R1 and L1
        if msg.buttons[5]:  # R1 button increases speed
            self.scale_linear_forward += self.scale_step
            self.scale_linear_backward += self.scale_step
            self.get_logger().info(f"Speed increased: {self.scale_linear_forward}")
        elif msg.buttons[4]:  # L1 button decreases speed
            self.scale_linear_forward = max(0.1, self.scale_linear_forward - self.scale_step)
            self.scale_linear_backward = max(0.1, self.scale_linear_backward - self.scale_step)
            self.get_logger().info(f"Speed decreased: {self.scale_linear_forward}")

        # Get trigger and stick inputs
        forward = (msg.axes[5] + 1) / 2 * self.scale_linear_forward  # Normalize R2
        backward = (msg.axes[2] + 1) / 2 * self.scale_linear_backward  # Normalize L2
        angular = msg.axes[0] * self.scale_angular  # L3 horizontal

        # Calculate linear velocity
        linear_vel = forward - backward  # Combine forward and backward

        # Publish velocity command
        vel_msg = Float64MultiArray()
        vel_msg.data = [linear_vel, linear_vel, linear_vel, linear_vel]
        self.velocity_publisher.publish(vel_msg)

        # Publish steering command
        steer_msg = Float64MultiArray()
        steer_msg.data = [angular, angular, 0.0, 0.0]  # Adjust for front steering
        self.steering_publisher.publish(steer_msg)

def main(args=None):
    rclpy.init(args=args)
    node = JoystickMapper()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
